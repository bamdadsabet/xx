import type { IconAliases, IconSet } from 'vuetify'
import { h, resolveComponent } from 'vue'
import {
  PhArrowDown,
  PhArrowLeft,
  PhArrowRight,
  PhBeerBottle,
  PhBuildingOffice,
  PhCalendar,
  PhCaretDown,
  PhCaretLeft,
  PhCaretRight,
  PhCheck,
  PhCheckSquare,
  PhCheckSquareOffset,
  PhCircle,
  PhCoffee,
  PhCoins,
  PhDot,
  PhEnvelopeSimple,
  PhEye,
  PhEyeSlash,
  PhFishSimple,
  PhGear,
  PhGrains,
  PhHand,
  PhHandPointing,
  PhHeart,
  PhHorse,
  PhHouseLine,
  PhInstagramLogo,
  PhLayout,
  PhLinkedinLogo,
  PhList,
  PhMapPin,
  PhPencilSimple,
  PhPhone,
  PhPrinter,
  PhRadioButton,
  PhSquare,
  PhTrash,
  PhUploadSimple,
  PhUser,
  PhUserGear,
  PhUserRectangle,
  PhUsers,
  PhUserSquare,
  PhX,
  PhXCircle,
  PhYoutubeLogo,
} from '@phosphor-icons/vue'
function toKebabCase (str = '') {
  if (toKebabCase.cache.has(str)) { return toKebabCase.cache.get(str)! }
  const kebab = str
    .replace(/[^a-z]/gi, '-')
    .replace(/\B([A-Z])/g, '-$1')
    .toLowerCase()
  toKebabCase.cache.set(str, kebab)
  return kebab
}
toKebabCase.cache = new Map<string, string>()
const aliases = <IconAliases>{
  instagram: PhInstagramLogo,
  youtube: PhYoutubeLogo,
  linkedin: PhLinkedinLogo,
  phone: PhPhone,
  'map-pin': PhMapPin,
  envelope: PhEnvelopeSimple,
  home: PhHouseLine,
  building: PhBuildingOffice,
  users: PhUsers,
  coffee: PhCoffee,
  'beer-bottle': PhBeerBottle,
  printer: PhPrinter,
  settings: PhGear,
  'user-squad': PhUserSquare,
  fish: PhFishSimple,
  'hand-pointing': PhHandPointing,
  layout: PhLayout,
  'user-settings': PhUserGear,
  coins: PhCoins,
  grains: PhGrains,
  'chevron-right': PhCaretRight,
  'chevron-left': PhCaretLeft,
  eye: PhEye,
  'eye-slash': PhEyeSlash,
  list: PhList,
  dot: PhDot,
  check: PhCheck,
  heart: PhHeart,
  horse: PhHorse,
  calendar: PhCalendar,
  cancel: PhCircle,
  checkboxIndeterminate: PhCheckSquareOffset,
  checkboxOn: PhCheckSquare,
  checkboxOff: PhSquare,
  // FIXME duplicated usage
  clear: PhXCircle,
  close: PhXCircle,
  complete: PhCircle,
  delete: PhXCircle,
  delimiter: PhCircle,
  'arrow-right': PhArrowRight,
  'arrow-left': PhArrowLeft,
  user: PhUser,
  subgroup: PhArrowDown,
  dropdown: PhCaretDown,
  edit: PhPencilSimple,
  error: PhCircle,
  expand: PhCircle,
  file: PhCircle,
  first: PhCircle,
  info: PhCircle,
  last: PhCircle,
  loading: PhCircle,
  menu: PhCircle,
  minus: PhCircle,
  next: PhCaretRight,
  plus: PhCircle,
  prev: PhCaretLeft,
  radioOff: PhCircle,
  radioOn: PhRadioButton,
  ratingEmpty: PhCircle,
  ratingFull: PhCircle,
  ratingHalf: PhCircle,
  sortAsc: PhCircle,
  sortDesc: PhCircle,
  success: PhCircle,
  unfold: PhCircle,
  warning: PhCircle,
  hand: PhHand,
  trash: PhTrash,
  'user-rectangle': PhUserRectangle,
  'upload-simple': PhUploadSimple,
  x: PhX,
}
const phosphor = <IconSet>{
  component: props => {
    const { icon, ...rest } = props
    const stringIcon = icon as string
    return h(props.tag, rest, [
      h(aliases[stringIcon] ?? resolveComponent(toKebabCase(stringIcon)), {
        key: stringIcon,
        ...rest,
      }),
    ])
  },
}
export { aliases, phosphor }
